#+TITLE: Org mode

#+SETUPFILE: ../../setup.org

* Code example
#+begin_src C++ -n -r :exports both
#include <iostream>

int main() {
        std::cout << "Hello World!" << std::endl; (ref:sc)
        return 0
}
#+end_src

Test reference [[(sc)]]

Inline code: =cmake ..=

Using codeblocks result:

#+name: test-python
#+BEGIN_SRC python :results value
return "Test"
#+END_SRC

#+BEGIN_SRC python :var s=test-python :results value
return "Wow it's: {}".format(s)
#+END_SRC

* $\LaTeX$ examples
\[ e^{ix} = \cos x + i \sin x \]
\[ \begin{vmatrix} 1 & 1 \\ 1 & 0 \end{vmatrix}^2 = \begin{vmatrix} 2 & 1 \\ 1 & 1 \end{vmatrix} \]

Test latex classes: $\R$

#+begin_theorem org
Some cool theorem
#+end_theorem
#+begin_proof org
Some cool proof of some cool theorem
#+end_proof
#+begin_theorem org
Another cool theorem
#+end_theorem
* Quote example
#+begin_quote
Great clouds overhead
Tiny black birds rise and fall
Snow covers Emacs

   ---AlexSchroeder
#+end_quote
* Dot graph
#+BEGIN_SRC dot :file TMP.png :cmdline -Kdot -Tpng :exports both
  digraph {
      a -> b [color=blue, label="test"];
      b -> c;
      b -> d;
      d -> e;
      d -> f;
  }
#+END_SRC
* Gnuplot example

#+BEGIN_SRC gnuplot :file plot1.png :exports both
reset

set title "Putting it All Together"

set xlabel "X"
set xrange [-8:8]
set xtics -8,2,8


set ylabel "Y"
set yrange [-20:70]
set ytics -20,10,70

f(x) = x**2
g(x) = x**3
h(x) = 10*sqrt(abs(x))

plot f(x) w lp lw 1, g(x) w p lw 2, h(x) w l lw 3
#+END_SRC
* Python example

#+BEGIN_SRC python :results file :exports both
  import matplotlib
  matplotlib.use('Agg')
  import matplotlib.pyplot as plt
  filename = '13_2.png'
  plt.plot([0, 1, 1, 2], [1, 1, 0, 0])
  plt.ylabel("$hash(s[i : k]) = hash(j : k)$")
  plt.xlabel("$s_i$")
  plt.yticks([0, 1])
  plt.xticks([0, 1, 2])
  plt.savefig(filename)
  return filename
#+END_SRC
* Python & Gnuplot example

#+TBLNAME: test-table
#+BEGIN_SRC python :results value :exports both
import math
import numpy as np
y = lambda x: x**2
X = list(np.arange(-10, 10, 0.25))
Y = []
for x in X:
    Y += [y(x)]
return list(zip(X, Y))
#+END_SRC

#+BEGIN_SRC gnuplot :var data=test-table :file plot2.png :exports both
plot data
#+END_SRC
#+CAPTION: Test
#+RESULTS:
[[file:plot2.png]]

#+BEGIN_SRC python :var data=test-table :exports borh
return data[1]
#+END_SRC
